#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m =-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];

const double pi = acos(-1.0);
const int maxn = (i64)2e9+5;

char s[100005];
bool tree[300005];
int ans;
void build(int node, int b, int e)
{
    if(b==e)
    {
        tree[node] = s[b-1]-48;
        return ;
    }
    else tree[node] = 0;
    int m = (b+e)/2;
    build(node<<1,b,m);
    build((node<<1)+1,m+1,e);
}

void update(int node, int b, int e, int i, int j)
{
    if(b>j || e<i) return;
    else if(b>=i && e<=j)
    {
        if(tree[node]) tree[node] = 0;
        else tree[node] = 1;
        return;
    }
    if(tree[node])
    {
        tree[node<<1] = !tree[node<<1];
        tree[(node<<1)+1] = !tree[(node<<1)+1];
        tree[node] = 0;
    }
    int m = (b+e)/2;
    update(node<<1,b,m,i,j);
    update((node<<1)+1,m+1,e,i,j);

}
int query(int node, int b, int e, int i)
{
    if(b>i || e<i) return ans;
    else if(b==i && e==i)
    {
        return ans = tree[node];
    }
    if(tree[node])
    {
        tree[node<<1] = !tree[node<<1];
        tree[(node<<1)+1] = !tree[(node<<1)+1];
        tree[node] = 0;
    }
    int m = (b+e)/2;
    query(node<<1,b,m,i);
    query((node<<1)+1,m+1,e,i);
}
int main()
{
    //freopen("input.txt","r",stdin);
    int t;
    scanf("%d",&t);
    for(int k = 1 ; k<=t ; k++)
    {
        scanf("%s",s);
        int n = strlen(s);
        build(1,1,n);
        int q;
        scanf("%d",&q);
        printf("Case %d:\n",k);
        while(q--)
        {
            char c;
            getchar();
            scanf("%c",&c);
            if(c=='I')
            {
                int i,j;
                scanf("%d%d",&i,&j);
                update(1,1,n,i,j);
            }
            else
            {
                int i;
                scanf("%d",&i);
                printf("%d\n",query(1,1,n,i));
            }
        }
    }
    return 0;
}
