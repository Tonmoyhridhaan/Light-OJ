#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m=-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);
#define F first
#define S second

const int maxn = (i64)1e9+7;
const double pi = acos(-1.0);

//bool fne(const pii &a, const pii &b){return (a.F < b.F)||(a.F==b.F&&a.S<b.S);}
//bool sne(const pii &a, const pii &b){return (a.S < b.S)||(a.S==b.S&&a.F<b.F);}

int tree[200005];
int arr[200005],last;
int query(int i)
{
    int sum = 0;
    while(i>0){sum+=tree[i];i-=(i&-i);}
    return sum;
}

void update(int i, int x, int n)
{
    while(i<=n){tree[i]+=x;i+=(i&-i);}
}
int range_query(int i)
{
    int pre = query(i-1);
    int suf = query(i);
    return suf-pre;
}

int b_search(int x,int n)
{
    int b=1,e=n,m;
    while(b<=e)
    {
        m=(b+e)>>1;
        int pos=query(m);
        if(x==pos)
        {
            if(range_query(m)!=1) e=m-1;
            else return m;
        }
        else if(x<pos) e=m-1;
        else b=m+1;
    }
    return -1;
}
int main()
{
    //read;
    int t;
    scanf("%d",&t);
    for(int z=1;z<=t;z++)
    {
        int n,q;
        printf("Case %d:\n",z);
        scanf("%d%d",&n,&q);
        last=n<<1;
        for(int i=1;i<=n;i++){scanf("%d",&arr[i]);update(i,1,last);}
        while(q--)
        {
            getchar();
            char c;
            int x;
            scanf("%c%d",&c,&x);
            if(c=='a')
            {
                arr[++n]=x;
                update(n,1,last);
            }
            else
            {
                int ans=b_search(x,n);
                if(ans!=-1) {printf("%d\n",arr[ans]);update(ans,-1,last);}
                else printf("none\n");
            }
        }
        mem(tree,0);
        mem(arr,0);
    }

    return 0;
}
