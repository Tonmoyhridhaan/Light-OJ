#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define pii pair<int,int>
#define pli pair<long long int,int>
#define pbi pair<bool,int>
#define pob pop_back
#define all(a) a.begin(),a.end()
#define fio ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define i64 long long int
#define mem(x,y) memset(x,y,sizeof(x))
#define fill(arr,b) fill(arr, arr+sizeof(arr)/sizeof(arr[0]), b)
#define maxarr(n,arr,m) m =-1e9;for(int i=0;i<n;i++)if(arr[i]>m) m=arr[i];
#define read freopen("input.txt","r",stdin);

const double pi = acos(-1.0);
const int maxn = (i64)1e9+7;
int arr[505];
int tree[501][1505];

void init(int node, int b, int e,int x){
    if(b == e){
         tree[x][node] = arr[b];
         return;
    }
    int left = 2*node;
    int right = 2*node + 1;
    int m = (b+e)/2;
    init(left,b,m,x);
    init(right,m+1,e,x);
    tree[x][node] = max(tree[x][left],tree[x][right]);
}

int query(int node, int b, int e, int i, int j,int x){
    if(e<i || b>j) return 0;
    else if(e<=j && b>=i){
        return tree[x][node];
    }
    int left = 2*node;
    int right = 2*node + 1;
    int m = (b+e)/2;
    int v1 = query(left,b,m,i,j,x);
    int v2 = query(right,m+1,e,i,j,x);
    return max(v1 , v2);
}

int main()
{
    //read;
    int t;
    scanf("%d",&t);

    for(int z = 1 ; z<=t ; z++)
    {

        int n,q;
        scanf("%d%d",&n,&q);
        for(int i = 1 ; i<=n ; i++)
        {
            for(int j = 1 ; j<=n  ;j++) scanf("%d",&arr[j]);
            init(1,1,n,i);
        }
        printf("Case %d:\n",z);

        while(q--)
        {
            int i,j,s,ans=0;
            scanf("%d%d%d",&i,&j,&s);

            int x = i+s-1;
            int y = j+s-1;
            for( ; i<=x ; i++)
            {
                ans = max(ans,query(1,1,n,j,y,i));
            }
            printf("%d\n",ans);
        }
    }
    return 0;
}
